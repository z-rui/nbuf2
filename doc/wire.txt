# Spec

In this spec, word = 4 bytes.
Any multi-byte value on wire is little-endian.
Signed integers use 2's complement.
Floating numbers use IEEE-754 format.

# Wire format

The wire format specified here enables one to fully parse the structure of
any buffer.  So one can manipulate the buffer (e.g., traverse the object tree)
without any type information.  They still need type information to interpret
the scalar part.

    buffer ::= obj { Padding obj }

The buffer consists of 1 or more objects aligned at word boundary.
Padding is null bytes before an obj to ensure alignment.

    obj ::= singularObj | repeatedObj

An object is either signular or repeated.  It's type can be determined
by reading the first word, or its header.

    singularObj ::= SingularHdr base_obj
    repeatedObj ::= ArrayHdr Word { base_obj }
                  | ScalarArrayHdr { Byte }

SingluarHdr:
     31  30  29  28              14 13                0
    | 1 | 0 | 0 | scalar part size | pointer part size |

The scalar part size (ssize) is the number of bytes the object has,
and the pointer part size (psize) is the number of pointers the object has.

    base_obj ::= { Word } { Byte }

The base object consists of two parts: the pointer part comes first,
each being a word.  The pointer points to sub-objects.  The value of pointer
is the difference in words of the address of the pointed-to object's header
and the pointer's own address.  Example:

    0x80000001  # header: singular object, ssize=0, psize=1
    0x00000001  # pointer to next word
    0x80010000  # header: singular object, ssize=4, psize=0
    0xdeadbeef  # scalar value

ArrayHdr:
     31  30  29  28              14 13                0
    | 1 | 0 | 1 | scalar part size | pointer part size |

For an repeated object, the scalar part size and pointer part size are for
each element in the array.  The array length (N) is specified in the word after
the header, which must be smaller than 2^31 to ensure its MSB to be 0.
After that, N base objects follows.

If psize > 0, ssize must be a multiple of word size to ensure alignment.

ScalarArrayHdr:
     31  30  29                                       0
    | 1 | 1 | array length                             |

As a special case, when psize=0, the implementation is allowed to use
ScalarArrayHdr to save one word on the wire.  The length must be smaller than
2^30.


# Basic types

The basic types are:

- Unsigned integer of 8, 16, 32, and 64 bits.
- Signed integer of 8, 16, 32 and 64 bits.
- Floating point, single precision (32-bit) and double precision (64-bit).
- String.

Integer and floating point numbers are scalars.  Any scalar smaller than a
word is aligned at its own size, others (i.e., 64-bit values) are only
aligned at word boundary.

A string is represented as a repeated object, each element is a 8-bit unsigned
integer.  Thus, it can use ScalarArrayHdr to save 4 bytes in the header.
A string is guaranteed to end with a '\0' byte, for compatibility with C
routines.  This byte is counted in the array length on wire, but not in the
string length.  That is, the API should perform the +1/-1 adjustment when
setting/getting a string.


# Message type

A message consists of 1 or more fields.  Each has its own type, and can be
either singular or repeated.  Singular scalar fields are allocated in the
scalar part, and others are allocated in the pointer part.

Repeated fields are stored as a repeated object on wire.  There are 3 cases:

1. Repeated scalars.
  - ssize=size of the scalar
  - psize=0
2. Repeated strings.
  - Each element will be a pointer to string.
  - ssize=0
  - psize=1
3. Repeated messages.
  - Each element will be the base object for that message.  Note, all
    repeated messages share the same header.
  - ssize=ssize of the message type
  - psize=psize of the message type
