/* Generated by nbufc.  DO NOT EDIT!
 * source: nbuf_schema.nbuf
 */

#ifndef NBUF_SCHEMA_NB_H_
#define NBUF_SCHEMA_NB_H_

#include "nbuf.h"

typedef enum {
	nbuf_Kind_VOID = 0,
	nbuf_Kind_BOOL = 1,
	nbuf_Kind_ENUM = 2,
	nbuf_Kind_UINT = 3,
	nbuf_Kind_SINT = 4,
	nbuf_Kind_FLT = 5,
	nbuf_Kind_MSG = 6,
	nbuf_Kind_STR = 7,
	nbuf_Kind_ARR = 8,
} nbuf_Kind;
extern const struct nbuf_EnumDef_ nbuf_refl_Kind;

typedef struct nbuf_Schema_ {
	struct nbuf_obj o;
} nbuf_Schema;
extern const struct nbuf_MsgDef_ nbuf_refl_Schema;

static inline size_t
nbuf_get_Schema(nbuf_Schema *msg, struct nbuf *buf, size_t offset)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->offset = offset;
	return nbuf_get_obj(o);
}

static inline size_t
nbuf_alloc_Schema(nbuf_Schema *msg, struct nbuf *buf)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->ssize = 0;
	o->psize = 4;
	return nbuf_alloc_obj(o);
}

static inline size_t
nbuf_alloc_multi_Schema(nbuf_Schema *msg, struct nbuf *buf, size_t n)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->ssize = 0;
	o->psize = 4;
	return nbuf_alloc_arr(o, n);
}

typedef struct nbuf_EnumDef_ {
	struct nbuf_obj o;
} nbuf_EnumDef;
extern const struct nbuf_MsgDef_ nbuf_refl_EnumDef;

static inline size_t
nbuf_get_EnumDef(nbuf_EnumDef *msg, struct nbuf *buf, size_t offset)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->offset = offset;
	return nbuf_get_obj(o);
}

static inline size_t
nbuf_alloc_EnumDef(nbuf_EnumDef *msg, struct nbuf *buf)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->ssize = 0;
	o->psize = 2;
	return nbuf_alloc_obj(o);
}

static inline size_t
nbuf_alloc_multi_EnumDef(nbuf_EnumDef *msg, struct nbuf *buf, size_t n)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->ssize = 0;
	o->psize = 2;
	return nbuf_alloc_arr(o, n);
}

typedef struct nbuf_EnumVal_ {
	struct nbuf_obj o;
} nbuf_EnumVal;
extern const struct nbuf_MsgDef_ nbuf_refl_EnumVal;

static inline size_t
nbuf_get_EnumVal(nbuf_EnumVal *msg, struct nbuf *buf, size_t offset)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->offset = offset;
	return nbuf_get_obj(o);
}

static inline size_t
nbuf_alloc_EnumVal(nbuf_EnumVal *msg, struct nbuf *buf)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->ssize = 4;
	o->psize = 1;
	return nbuf_alloc_obj(o);
}

static inline size_t
nbuf_alloc_multi_EnumVal(nbuf_EnumVal *msg, struct nbuf *buf, size_t n)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->ssize = 4;
	o->psize = 1;
	return nbuf_alloc_arr(o, n);
}

typedef struct nbuf_MsgDef_ {
	struct nbuf_obj o;
} nbuf_MsgDef;
extern const struct nbuf_MsgDef_ nbuf_refl_MsgDef;

static inline size_t
nbuf_get_MsgDef(nbuf_MsgDef *msg, struct nbuf *buf, size_t offset)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->offset = offset;
	return nbuf_get_obj(o);
}

static inline size_t
nbuf_alloc_MsgDef(nbuf_MsgDef *msg, struct nbuf *buf)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->ssize = 4;
	o->psize = 2;
	return nbuf_alloc_obj(o);
}

static inline size_t
nbuf_alloc_multi_MsgDef(nbuf_MsgDef *msg, struct nbuf *buf, size_t n)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->ssize = 4;
	o->psize = 2;
	return nbuf_alloc_arr(o, n);
}

typedef struct nbuf_FieldDef_ {
	struct nbuf_obj o;
} nbuf_FieldDef;
extern const struct nbuf_MsgDef_ nbuf_refl_FieldDef;

static inline size_t
nbuf_get_FieldDef(nbuf_FieldDef *msg, struct nbuf *buf, size_t offset)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->offset = offset;
	return nbuf_get_obj(o);
}

static inline size_t
nbuf_alloc_FieldDef(nbuf_FieldDef *msg, struct nbuf *buf)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->ssize = 8;
	o->psize = 1;
	return nbuf_alloc_obj(o);
}

static inline size_t
nbuf_alloc_multi_FieldDef(nbuf_FieldDef *msg, struct nbuf *buf, size_t n)
{
	struct nbuf_obj *o = NBUF_OBJ(*msg);
	o->buf = buf;
	o->ssize = 8;
	o->psize = 1;
	return nbuf_alloc_arr(o, n);
}

static inline size_t
nbuf_Schema_raw_pkg_name(struct nbuf_obj *o, nbuf_Schema msg)
{
	return nbuf_obj_p(o, NBUF_OBJ(msg), 0);
}

static inline size_t
nbuf_Schema_set_raw_pkg_name(nbuf_Schema msg, const struct nbuf_obj *o)
{
	return nbuf_obj_set_p(NBUF_OBJ(msg), 0, o);
}

static inline const char *
nbuf_Schema_pkg_name(nbuf_Schema msg, size_t *lenp)
{
	struct nbuf_obj o;
	size_t n = nbuf_Schema_raw_pkg_name(&o, msg);
	return nbuf_obj2str(&o, n, lenp);
}

static inline size_t
nbuf_Schema_set_pkg_name(nbuf_Schema msg, const char *str, size_t len)
{
	struct nbuf_obj o = {NBUF_OBJ(msg)->buf};
	if (!nbuf_alloc_str(&o, str, len))
		return 0;
	return nbuf_Schema_set_raw_pkg_name(msg, &o);
}

static inline size_t
nbuf_Schema_raw_src_name(struct nbuf_obj *o, nbuf_Schema msg)
{
	return nbuf_obj_p(o, NBUF_OBJ(msg), 1);
}

static inline size_t
nbuf_Schema_set_raw_src_name(nbuf_Schema msg, const struct nbuf_obj *o)
{
	return nbuf_obj_set_p(NBUF_OBJ(msg), 1, o);
}

static inline const char *
nbuf_Schema_src_name(nbuf_Schema msg, size_t *lenp)
{
	struct nbuf_obj o;
	size_t n = nbuf_Schema_raw_src_name(&o, msg);
	return nbuf_obj2str(&o, n, lenp);
}

static inline size_t
nbuf_Schema_set_src_name(nbuf_Schema msg, const char *str, size_t len)
{
	struct nbuf_obj o = {NBUF_OBJ(msg)->buf};
	if (!nbuf_alloc_str(&o, str, len))
		return 0;
	return nbuf_Schema_set_raw_src_name(msg, &o);
}

static inline size_t
nbuf_Schema_raw_enums(struct nbuf_obj *o, nbuf_Schema msg)
{
	return nbuf_obj_p(o, NBUF_OBJ(msg), 2);
}

static inline size_t
nbuf_Schema_set_raw_enums(nbuf_Schema msg, const struct nbuf_obj *o)
{
	return nbuf_obj_set_p(NBUF_OBJ(msg), 2, o);
}

static inline size_t
nbuf_Schema_enums(struct nbuf_EnumDef_ *field, nbuf_Schema msg, size_t i)
{
	struct nbuf_obj *o = (struct nbuf_obj *) field;
	size_t n = nbuf_Schema_raw_enums(o, msg);
	return (i >= n) ? 0 : (nbuf_advance(o, i), n - i);
}

static inline size_t
nbuf_Schema_enums_size(nbuf_Schema msg)
{
	struct nbuf_obj o;
	return nbuf_Schema_raw_enums(&o, msg);
}

static inline size_t
nbuf_Schema_alloc_enums(struct nbuf_EnumDef_ *field, nbuf_Schema msg, size_t n)
{
	return nbuf_alloc_multi_EnumDef(field, NBUF_OBJ(msg)->buf, n) ? 
		nbuf_Schema_set_raw_enums(msg, (struct nbuf_obj *) field) : 0;
}

static inline size_t
nbuf_Schema_raw_messages(struct nbuf_obj *o, nbuf_Schema msg)
{
	return nbuf_obj_p(o, NBUF_OBJ(msg), 3);
}

static inline size_t
nbuf_Schema_set_raw_messages(nbuf_Schema msg, const struct nbuf_obj *o)
{
	return nbuf_obj_set_p(NBUF_OBJ(msg), 3, o);
}

static inline size_t
nbuf_Schema_messages(struct nbuf_MsgDef_ *field, nbuf_Schema msg, size_t i)
{
	struct nbuf_obj *o = (struct nbuf_obj *) field;
	size_t n = nbuf_Schema_raw_messages(o, msg);
	return (i >= n) ? 0 : (nbuf_advance(o, i), n - i);
}

static inline size_t
nbuf_Schema_messages_size(nbuf_Schema msg)
{
	struct nbuf_obj o;
	return nbuf_Schema_raw_messages(&o, msg);
}

static inline size_t
nbuf_Schema_alloc_messages(struct nbuf_MsgDef_ *field, nbuf_Schema msg, size_t n)
{
	return nbuf_alloc_multi_MsgDef(field, NBUF_OBJ(msg)->buf, n) ? 
		nbuf_Schema_set_raw_messages(msg, (struct nbuf_obj *) field) : 0;
}

static inline size_t
nbuf_EnumDef_raw_name(struct nbuf_obj *o, nbuf_EnumDef msg)
{
	return nbuf_obj_p(o, NBUF_OBJ(msg), 0);
}

static inline size_t
nbuf_EnumDef_set_raw_name(nbuf_EnumDef msg, const struct nbuf_obj *o)
{
	return nbuf_obj_set_p(NBUF_OBJ(msg), 0, o);
}

static inline const char *
nbuf_EnumDef_name(nbuf_EnumDef msg, size_t *lenp)
{
	struct nbuf_obj o;
	size_t n = nbuf_EnumDef_raw_name(&o, msg);
	return nbuf_obj2str(&o, n, lenp);
}

static inline size_t
nbuf_EnumDef_set_name(nbuf_EnumDef msg, const char *str, size_t len)
{
	struct nbuf_obj o = {NBUF_OBJ(msg)->buf};
	if (!nbuf_alloc_str(&o, str, len))
		return 0;
	return nbuf_EnumDef_set_raw_name(msg, &o);
}

static inline size_t
nbuf_EnumDef_raw_values(struct nbuf_obj *o, nbuf_EnumDef msg)
{
	return nbuf_obj_p(o, NBUF_OBJ(msg), 1);
}

static inline size_t
nbuf_EnumDef_set_raw_values(nbuf_EnumDef msg, const struct nbuf_obj *o)
{
	return nbuf_obj_set_p(NBUF_OBJ(msg), 1, o);
}

static inline size_t
nbuf_EnumDef_values(struct nbuf_EnumVal_ *field, nbuf_EnumDef msg, size_t i)
{
	struct nbuf_obj *o = (struct nbuf_obj *) field;
	size_t n = nbuf_EnumDef_raw_values(o, msg);
	return (i >= n) ? 0 : (nbuf_advance(o, i), n - i);
}

static inline size_t
nbuf_EnumDef_values_size(nbuf_EnumDef msg)
{
	struct nbuf_obj o;
	return nbuf_EnumDef_raw_values(&o, msg);
}

static inline size_t
nbuf_EnumDef_alloc_values(struct nbuf_EnumVal_ *field, nbuf_EnumDef msg, size_t n)
{
	return nbuf_alloc_multi_EnumVal(field, NBUF_OBJ(msg)->buf, n) ? 
		nbuf_EnumDef_set_raw_values(msg, (struct nbuf_obj *) field) : 0;
}

static inline size_t
nbuf_EnumVal_raw_symbol(struct nbuf_obj *o, nbuf_EnumVal msg)
{
	return nbuf_obj_p(o, NBUF_OBJ(msg), 0);
}

static inline size_t
nbuf_EnumVal_set_raw_symbol(nbuf_EnumVal msg, const struct nbuf_obj *o)
{
	return nbuf_obj_set_p(NBUF_OBJ(msg), 0, o);
}

static inline const char *
nbuf_EnumVal_symbol(nbuf_EnumVal msg, size_t *lenp)
{
	struct nbuf_obj o;
	size_t n = nbuf_EnumVal_raw_symbol(&o, msg);
	return nbuf_obj2str(&o, n, lenp);
}

static inline size_t
nbuf_EnumVal_set_symbol(nbuf_EnumVal msg, const char *str, size_t len)
{
	struct nbuf_obj o = {NBUF_OBJ(msg)->buf};
	if (!nbuf_alloc_str(&o, str, len))
		return 0;
	return nbuf_EnumVal_set_raw_symbol(msg, &o);
}

static inline uint16_t
nbuf_EnumVal_value(nbuf_EnumVal msg)
{
	const void *p = nbuf_obj_s(NBUF_OBJ(msg), 0, 2);
	return (uint16_t) (p ? nbuf_u16(p) : 0);
}

static inline void *
nbuf_EnumVal_set_value(nbuf_EnumVal msg, uint16_t val)
{
	void *p = nbuf_obj_s(NBUF_OBJ(msg), 0, 2);
	if (p) nbuf_set_u16(p, val);
	return p;
}

static inline size_t
nbuf_MsgDef_raw_name(struct nbuf_obj *o, nbuf_MsgDef msg)
{
	return nbuf_obj_p(o, NBUF_OBJ(msg), 0);
}

static inline size_t
nbuf_MsgDef_set_raw_name(nbuf_MsgDef msg, const struct nbuf_obj *o)
{
	return nbuf_obj_set_p(NBUF_OBJ(msg), 0, o);
}

static inline const char *
nbuf_MsgDef_name(nbuf_MsgDef msg, size_t *lenp)
{
	struct nbuf_obj o;
	size_t n = nbuf_MsgDef_raw_name(&o, msg);
	return nbuf_obj2str(&o, n, lenp);
}

static inline size_t
nbuf_MsgDef_set_name(nbuf_MsgDef msg, const char *str, size_t len)
{
	struct nbuf_obj o = {NBUF_OBJ(msg)->buf};
	if (!nbuf_alloc_str(&o, str, len))
		return 0;
	return nbuf_MsgDef_set_raw_name(msg, &o);
}

static inline size_t
nbuf_MsgDef_raw_fields(struct nbuf_obj *o, nbuf_MsgDef msg)
{
	return nbuf_obj_p(o, NBUF_OBJ(msg), 1);
}

static inline size_t
nbuf_MsgDef_set_raw_fields(nbuf_MsgDef msg, const struct nbuf_obj *o)
{
	return nbuf_obj_set_p(NBUF_OBJ(msg), 1, o);
}

static inline size_t
nbuf_MsgDef_fields(struct nbuf_FieldDef_ *field, nbuf_MsgDef msg, size_t i)
{
	struct nbuf_obj *o = (struct nbuf_obj *) field;
	size_t n = nbuf_MsgDef_raw_fields(o, msg);
	return (i >= n) ? 0 : (nbuf_advance(o, i), n - i);
}

static inline size_t
nbuf_MsgDef_fields_size(nbuf_MsgDef msg)
{
	struct nbuf_obj o;
	return nbuf_MsgDef_raw_fields(&o, msg);
}

static inline size_t
nbuf_MsgDef_alloc_fields(struct nbuf_FieldDef_ *field, nbuf_MsgDef msg, size_t n)
{
	return nbuf_alloc_multi_FieldDef(field, NBUF_OBJ(msg)->buf, n) ? 
		nbuf_MsgDef_set_raw_fields(msg, (struct nbuf_obj *) field) : 0;
}

static inline uint16_t
nbuf_MsgDef_ssize(nbuf_MsgDef msg)
{
	const void *p = nbuf_obj_s(NBUF_OBJ(msg), 0, 2);
	return (uint16_t) (p ? nbuf_u16(p) : 0);
}

static inline void *
nbuf_MsgDef_set_ssize(nbuf_MsgDef msg, uint16_t val)
{
	void *p = nbuf_obj_s(NBUF_OBJ(msg), 0, 2);
	if (p) nbuf_set_u16(p, val);
	return p;
}

static inline uint16_t
nbuf_MsgDef_psize(nbuf_MsgDef msg)
{
	const void *p = nbuf_obj_s(NBUF_OBJ(msg), 2, 2);
	return (uint16_t) (p ? nbuf_u16(p) : 0);
}

static inline void *
nbuf_MsgDef_set_psize(nbuf_MsgDef msg, uint16_t val)
{
	void *p = nbuf_obj_s(NBUF_OBJ(msg), 2, 2);
	if (p) nbuf_set_u16(p, val);
	return p;
}

static inline size_t
nbuf_FieldDef_raw_name(struct nbuf_obj *o, nbuf_FieldDef msg)
{
	return nbuf_obj_p(o, NBUF_OBJ(msg), 0);
}

static inline size_t
nbuf_FieldDef_set_raw_name(nbuf_FieldDef msg, const struct nbuf_obj *o)
{
	return nbuf_obj_set_p(NBUF_OBJ(msg), 0, o);
}

static inline const char *
nbuf_FieldDef_name(nbuf_FieldDef msg, size_t *lenp)
{
	struct nbuf_obj o;
	size_t n = nbuf_FieldDef_raw_name(&o, msg);
	return nbuf_obj2str(&o, n, lenp);
}

static inline size_t
nbuf_FieldDef_set_name(nbuf_FieldDef msg, const char *str, size_t len)
{
	struct nbuf_obj o = {NBUF_OBJ(msg)->buf};
	if (!nbuf_alloc_str(&o, str, len))
		return 0;
	return nbuf_FieldDef_set_raw_name(msg, &o);
}

static inline nbuf_Kind
nbuf_FieldDef_kind(nbuf_FieldDef msg)
{
	const void *p = nbuf_obj_s(NBUF_OBJ(msg), 0, 2);
	return (nbuf_Kind) (p ? nbuf_i16(p) : 0);
}

static inline void *
nbuf_FieldDef_set_kind(nbuf_FieldDef msg, nbuf_Kind val)
{
	void *p = nbuf_obj_s(NBUF_OBJ(msg), 0, 2);
	if (p) nbuf_set_i16(p, (int16_t) val);
	return p;
}

static inline uint16_t
nbuf_FieldDef_import_id(nbuf_FieldDef msg)
{
	const void *p = nbuf_obj_s(NBUF_OBJ(msg), 2, 2);
	return (uint16_t) (p ? nbuf_u16(p) : 0);
}

static inline void *
nbuf_FieldDef_set_import_id(nbuf_FieldDef msg, uint16_t val)
{
	void *p = nbuf_obj_s(NBUF_OBJ(msg), 2, 2);
	if (p) nbuf_set_u16(p, val);
	return p;
}

static inline uint16_t
nbuf_FieldDef_type_id(nbuf_FieldDef msg)
{
	const void *p = nbuf_obj_s(NBUF_OBJ(msg), 4, 2);
	return (uint16_t) (p ? nbuf_u16(p) : 0);
}

static inline void *
nbuf_FieldDef_set_type_id(nbuf_FieldDef msg, uint16_t val)
{
	void *p = nbuf_obj_s(NBUF_OBJ(msg), 4, 2);
	if (p) nbuf_set_u16(p, val);
	return p;
}

static inline uint16_t
nbuf_FieldDef_offset(nbuf_FieldDef msg)
{
	const void *p = nbuf_obj_s(NBUF_OBJ(msg), 6, 2);
	return (uint16_t) (p ? nbuf_u16(p) : 0);
}

static inline void *
nbuf_FieldDef_set_offset(nbuf_FieldDef msg, uint16_t val)
{
	void *p = nbuf_obj_s(NBUF_OBJ(msg), 6, 2);
	if (p) nbuf_set_u16(p, val);
	return p;
}

extern const struct nbuf_schema_set nbuf_schema_file_nbuf_5fschema_2enbuf;
#endif  /* NBUF_SCHEMA_NB_H_ */
